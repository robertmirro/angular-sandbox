
BREAK ON:
function loadModules(modulesToLoad)
    runBlocks = runBlocks.concat(loadModules(moduleFn.requires)).concat(moduleFn._runBlocks);

RUN:
moduleFn._invokeQueue.forEach(function(a){console.log('invokeQueue: %s.%s -> fn:%s', a[0], a[1], a[2][1].name)});
moduleFn._configBlocks.forEach(function(a){console.log('configBlocks: %s.%s -> fn:%s', a[0], a[1], a[2][1] ? a[2][1].name : a[2][0].name)});

========================================
========================================

decorator: invokeLaterAndSetModuleName('$provide', 'decorator'),
// decorator: invokeLaterAndSetModuleName('$provide', 'decorator', configBlocks),

angular
    .module('theApp', [], theModuleConfig)
    .controller('theController', theController)
    .provider('theProvider', theProvider)
    .config(theProviderConfig2)
    .config(theProviderConfigDecorator)
    .provider('theProvider', theOtherProvider)
    .decorator('theProvider', theProviderDecorator)
    .config(theProviderConfig1);

invokeQueue:  $controllerProvider.register -> fn:theController
invokeQueue:  $provide.provider -> fn:theProvider
invokeQueue:  $provide.provider -> fn:theOtherProvider
invokeQueue:  $provide.decorator -> fn:theProviderDecorator
configBlocks: $injector.invoke -> fn:theModuleConfig
configBlocks: $injector.invoke -> fn:theProviderConfig2
configBlocks: $injector.invoke -> fn:theProviderConfigDecorator
configBlocks: $injector.invoke -> fn:theProviderConfig1

theProvider...
theOtherProvider...
theModuleConfig...
  BEFORE: theOtherProviderInternal
  AFTER:  theOtherProviderInternal - theModuleConfig
theProviderConfig2...
  BEFORE: theOtherProviderInternal - theModuleConfig
  AFTER:  theOtherProviderInternal - theModuleConfig - theProviderConfig2
theProviderConfigDecorator... LOADED
theProviderConfig1...
  BEFORE: theOtherProviderInternal - theModuleConfig - theProviderConfig2
  AFTER:  theOtherProviderInternal - theModuleConfig - theProviderConfig2 - theProviderConfig1
  
---- CONTROLLER: when theController is instantianted, theProvider is injected causing the activity below --- 

theOtherProvider.$get... theOtherProviderInternal - theModuleConfig - theProviderConfig2 - theProviderConfig1
theProviderDecorator...
  BEFORE: Object {theInternalProperty: "theOtherProviderInternal - theModuleConfig - theProviderConfig2 - theProviderConfig1", theProperty: "theOtherProvider"}
  AFTER:  Object {theInternalProperty: "theOtherProviderInternal - theModuleConfig - thePr…nfig2 - theProviderConfig1 - theProviderDecorator", theProperty: "theOtherProvider - theProviderDecorator"}
theProviderConfigDecorator... DECORATOR
  BEFORE: Object {theInternalProperty: "theOtherProviderInternal - theModuleConfig - thePr…nfig2 - theProviderConfig1 - theProviderDecorator", theProperty: "theOtherProvider - theProviderDecorator"}
  AFTER:  Object {theInternalProperty: "theOtherProviderInternal - theModuleConfig - thePr…theProviderDecorator - theProviderConfigDecorator", theProperty: "theOtherProvider - theProviderDecorator - theProviderConfigDecorator"}
theController...

---- RESULT: ----

Date/Time: "2016-03-30T17:01:33.108Z"
theProvider.theInternalProperty: theOtherProviderInternal - theModuleConfig - theProviderConfig2 - theProviderConfig1 - theProviderDecorator - theProviderConfigDecorator
theProvider.theProperty: theOtherProvider - theProviderDecorator - theProviderConfigDecorator

========================================

decorator: invokeLaterAndSetModuleName('$provide', 'decorator'),
// decorator: invokeLaterAndSetModuleName('$provide', 'decorator', configBlocks),

angular
    .module('theApp', [], theModuleConfig)
    .controller('theController', theController)
    .provider('theProvider', theProvider)
    .decorator('theProvider', theProviderDecorator) /* DECORATOR DEFINED AFTER 1ST PROVIDER (theProvider) AND BEFORE THE PROVIDER IT IS SUPPOSED TO DECORATE (theOtherProvider) - CAUSES theOtherProvider TO NOT BE DECORATED */
    .config(theProviderConfig2)
    .config(theProviderConfigDecorator)
    .provider('theProvider', theOtherProvider)
    .config(theProviderConfig1);

invokeQueue:  $controllerProvider.register -> fn:theController
invokeQueue:  $provide.provider -> fn:theProvider
invokeQueue:  $provide.decorator -> fn:theProviderDecorator
invokeQueue:  $provide.provider -> fn:theOtherProvider
configBlocks: $injector.invoke -> fn:theModuleConfig
configBlocks: $injector.invoke -> fn:theProviderConfig2
configBlocks: $injector.invoke -> fn:theProviderConfigDecorator
configBlocks: $injector.invoke -> fn:theProviderConfig1

theProvider...
theOtherProvider...
theModuleConfig...
  BEFORE: theOtherProviderInternal
  AFTER:  theOtherProviderInternal - theModuleConfig
theProviderConfig2...
  BEFORE: theOtherProviderInternal - theModuleConfig
  AFTER:  theOtherProviderInternal - theModuleConfig - theProviderConfig2
theProviderConfigDecorator... LOADED
theProviderConfig1...
  BEFORE: theOtherProviderInternal - theModuleConfig - theProviderConfig2
  AFTER:  theOtherProviderInternal - theModuleConfig - theProviderConfig2 - theProviderConfig1
  
---- CONTROLLER: when theController is instantianted, theProvider is injected causing the activity below --- 
  
theOtherProvider.$get... theOtherProviderInternal - theModuleConfig - theProviderConfig2 - theProviderConfig1
theProviderConfigDecorator... DECORATOR
  BEFORE: Object {theInternalProperty: "theOtherProviderInternal - theModuleConfig - theProviderConfig2 - theProviderConfig1", theProperty: "theOtherProvider"}
  AFTER:  Object {theInternalProperty: "theOtherProviderInternal - theModuleConfig - thePr…- theProviderConfig1 - theProviderConfigDecorator", theProperty: "theOtherProvider - theProviderConfigDecorator"}
theController...

---- RESULT: ----

Date/Time: "2016-03-30T18:28:20.239Z"
theProvider.theInternalProperty: theOtherProviderInternal - theModuleConfig - theProviderConfig2 - theProviderConfig1 - theProviderConfigDecorator
theProvider.theProperty: theOtherProvider - theProviderConfigDecorator

========================================

// decorator: invokeLaterAndSetModuleName('$provide', 'decorator'),
decorator: invokeLaterAndSetModuleName('$provide', 'decorator', configBlocks),

angular
    .module('theApp', [], theModuleConfig)
    .controller('theController', theController)
    .provider('theProvider', theProvider)
    .config(theProviderConfig2)
    .config(theProviderConfigDecorator)
    .provider('theProvider', theOtherProvider)
    .decorator('theProvider', theProviderDecorator)  /* DECORATOR DEFINED AFTER PROVIDER IT IS SUPPOSED TO DECORATE (theOtherProvider) - THIS WORKS AS EXPECTED PRE-RJM-FIX AND FIX DOES NOT BREAK IT */
    .config(theProviderConfig1);

invokeQueue:  $controllerProvider.register -> fn:theController
invokeQueue:  $provide.provider -> fn:theProvider
invokeQueue:  $provide.provider -> fn:theOtherProvider
configBlocks: $injector.invoke -> fn:theModuleConfig
configBlocks: $injector.invoke -> fn:theProviderConfig2
configBlocks: $injector.invoke -> fn:theProviderConfigDecorator
configBlocks: $provide.decorator -> fn:theProviderDecorator
configBlocks: $injector.invoke -> fn:theProviderConfig1

theProvider...
theOtherProvider...
theModuleConfig...
  BEFORE: theOtherProviderInternal
  AFTER:  theOtherProviderInternal - theModuleConfig
theProviderConfig2...
  BEFORE: theOtherProviderInternal - theModuleConfig
  AFTER:  theOtherProviderInternal - theModuleConfig - theProviderConfig2
theProviderConfigDecorator... LOADED
theProviderConfig1...
  BEFORE: theOtherProviderInternal - theModuleConfig - theProviderConfig2
  AFTER:  theOtherProviderInternal - theModuleConfig - theProviderConfig2 - theProviderConfig1
  
---- CONTROLLER: when theController is instantianted, theProvider is injected causing the activity below --- 
  
theOtherProvider.$get... theOtherProviderInternal - theModuleConfig - theProviderConfig2 - theProviderConfig1
theProviderConfigDecorator... DECORATOR
  BEFORE: Object {theInternalProperty: "theOtherProviderInternal - theModuleConfig - theProviderConfig2 - theProviderConfig1", theProperty: "theOtherProvider"}
  AFTER:  Object {theInternalProperty: "theOtherProviderInternal - theModuleConfig - thePr…- theProviderConfig1 - theProviderConfigDecorator", theProperty: "theOtherProvider - theProviderConfigDecorator"}
theProviderDecorator...
  BEFORE: Object {theInternalProperty: "theOtherProviderInternal - theModuleConfig - thePr…- theProviderConfig1 - theProviderConfigDecorator", theProperty: "theOtherProvider - theProviderConfigDecorator"}
  AFTER:  Object {theInternalProperty: "theOtherProviderInternal - theModuleConfig - thePr…theProviderConfigDecorator - theProviderDecorator", theProperty: "theOtherProvider - theProviderConfigDecorator - theProviderDecorator"}
theController...

---- RESULT: WORKS ----

Date/Time: "2016-03-30T17:04:14.129Z"
theProvider.theInternalProperty: theOtherProviderInternal - theModuleConfig - theProviderConfig2 - theProviderConfig1 - theProviderConfigDecorator - theProviderDecorator
theProvider.theProperty: theOtherProvider - theProviderConfigDecorator - theProviderDecorator

========================================

// decorator: invokeLaterAndSetModuleName('$provide', 'decorator'),
decorator: invokeLaterAndSetModuleName('$provide', 'decorator', configBlocks),

angular
    .module('theApp', [], theModuleConfig)
    .controller('theController', theController)
    .decorator('theProvider', theProviderDecorator)  /* DECORATOR DEFINED BEFORE BOTH PROVIDERS (theProvider and theOtherProvider) - CAUSES ERROR PRE-RJM-FIX */
    .provider('theProvider', theProvider)
    .config(theProviderConfig2)
    .config(theProviderConfigDecorator)
    .provider('theProvider', theOtherProvider)
    .config(theProviderConfig1);

invokeQueue:  $controllerProvider.register -> fn:theController
invokeQueue:  $provide.provider -> fn:theProvider
invokeQueue:  $provide.provider -> fn:theOtherProvider
configBlocks: $injector.invoke -> fn:theModuleConfig
configBlocks: $provide.decorator -> fn:theProviderDecorator
configBlocks: $injector.invoke -> fn:theProviderConfig2
configBlocks: $injector.invoke -> fn:theProviderConfigDecorator
configBlocks: $injector.invoke -> fn:theProviderConfig1

theProvider...
theOtherProvider...
theModuleConfig...
  BEFORE: theOtherProviderInternal
  AFTER:  theOtherProviderInternal - theModuleConfig
theProviderConfig2...
  BEFORE: theOtherProviderInternal - theModuleConfig
  AFTER:  theOtherProviderInternal - theModuleConfig - theProviderConfig2
theProviderConfigDecorator... LOADED
theProviderConfig1...
  BEFORE: theOtherProviderInternal - theModuleConfig - theProviderConfig2
  AFTER:  theOtherProviderInternal - theModuleConfig - theProviderConfig2 - theProviderConfig1
  
---- CONTROLLER: when theController is instantianted, theProvider is injected causing the activity below --- 
  
theOtherProvider.$get... theOtherProviderInternal - theModuleConfig - theProviderConfig2 - theProviderConfig1
theProviderDecorator...
  BEFORE: Object {theInternalProperty: "theOtherProviderInternal - theModuleConfig - theProviderConfig2 - theProviderConfig1", theProperty: "theOtherProvider"}
  AFTER:  Object {theInternalProperty: "theOtherProviderInternal - theModuleConfig - thePr…nfig2 - theProviderConfig1 - theProviderDecorator", theProperty: "theOtherProvider - theProviderDecorator"}
theProviderConfigDecorator... DECORATOR
  BEFORE: Object {theInternalProperty: "theOtherProviderInternal - theModuleConfig - thePr…nfig2 - theProviderConfig1 - theProviderDecorator", theProperty: "theOtherProvider - theProviderDecorator"}
  AFTER:  Object {theInternalProperty: "theOtherProviderInternal - theModuleConfig - thePr…theProviderDecorator - theProviderConfigDecorator", theProperty: "theOtherProvider - theProviderDecorator - theProviderConfigDecorator"}
theController...

---- RESULT: ----

Date/Time: "2016-03-30T17:13:38.075Z"
theProvider.theInternalProperty: theOtherProviderInternal - theModuleConfig - theProviderConfig2 - theProviderConfig1 - theProviderDecorator - theProviderConfigDecorator
theProvider.theProperty: theOtherProvider - theProviderDecorator - theProviderConfigDecorator

========================================

// decorator: invokeLaterAndSetModuleName('$provide', 'decorator'),
decorator: invokeLaterAndSetModuleName('$provide', 'decorator', configBlocks),

angular
    .module('theApp', [], theModuleConfig)
    .controller('theController', theController)
    .provider('theProvider', theProvider)
    .decorator('theProvider', theProviderDecorator) /* DECORATOR DEFINED AFTER 1ST PROVIDER (theProvider) AND BEFORE THE PROVIDER IT IS SUPPOSED TO DECORATE (theOtherProvider) - CAUSES theOtherProvider TO NOT BE DECORATED PRE-RJM-FIX */
    .config(theProviderConfig2)
    .config(theProviderConfigDecorator)
    .provider('theProvider', theOtherProvider)
    .config(theProviderConfig1);

invokeQueue:  $controllerProvider.register -> fn:theController
invokeQueue:  $provide.provider -> fn:theProvider
invokeQueue:  $provide.provider -> fn:theOtherProvider
configBlocks: $injector.invoke -> fn:theModuleConfig
configBlocks: $provide.decorator -> fn:theProviderDecorator
configBlocks: $injector.invoke -> fn:theProviderConfig2
configBlocks: $injector.invoke -> fn:theProviderConfigDecorator
configBlocks: $injector.invoke -> fn:theProviderConfig1

theProvider...
theOtherProvider...
theModuleConfig...
  BEFORE: theOtherProviderInternal
  AFTER:  theOtherProviderInternal - theModuleConfig
theProviderConfig2...
  BEFORE: theOtherProviderInternal - theModuleConfig
  AFTER:  theOtherProviderInternal - theModuleConfig - theProviderConfig2
theProviderConfigDecorator... LOADED
theProviderConfig1...
  BEFORE: theOtherProviderInternal - theModuleConfig - theProviderConfig2
  AFTER:  theOtherProviderInternal - theModuleConfig - theProviderConfig2 - theProviderConfig1
  
---- CONTROLLER: when theController is instantianted, theProvider is injected causing the activity below --- 
  
theOtherProvider.$get... theOtherProviderInternal - theModuleConfig - theProviderConfig2 - theProviderConfig1
theProviderDecorator...
  BEFORE: Object {theInternalProperty: "theOtherProviderInternal - theModuleConfig - theProviderConfig2 - theProviderConfig1", theProperty: "theOtherProvider"}
  AFTER:  Object {theInternalProperty: "theOtherProviderInternal - theModuleConfig - thePr…nfig2 - theProviderConfig1 - theProviderDecorator", theProperty: "theOtherProvider - theProviderDecorator"}
theProviderConfigDecorator... DECORATOR
  BEFORE: Object {theInternalProperty: "theOtherProviderInternal - theModuleConfig - thePr…nfig2 - theProviderConfig1 - theProviderDecorator", theProperty: "theOtherProvider - theProviderDecorator"}
  AFTER:  Object {theInternalProperty: "theOtherProviderInternal - theModuleConfig - thePr…theProviderDecorator - theProviderConfigDecorator", theProperty: "theOtherProvider - theProviderDecorator - theProviderConfigDecorator"}
theController...

---- RESULT: WORKS ----

Date/Time: "2016-03-30T17:22:30.803Z"
theProvider.theInternalProperty: theOtherProviderInternal - theModuleConfig - theProviderConfig2 - theProviderConfig1 - theProviderDecorator - theProviderConfigDecorator
theProvider.theProperty: theOtherProvider - theProviderDecorator - theProviderConfigDecorator    

=============
=============

fix(loader): module.decorator declaration no longer requires explict order of operations

module.decorator() is now processed via the configBlocks order of operations and:
- no longer throws if declared before the provider being decorated
- guarantees the correct provider will be decorated when multiple, same-name providers are defined

Closes: #12382

=============

**What kind of change does this PR introduce? (Bug fix, feature, docs update, ...)**
Bug fix


**What is the current behavior? (You can also link to an open issue here)**
See #12382 


**What is the new behavior (if this is a feature change)?**
module.decorator declarations are now invoked via the configBlocks queue to ensure that the provider being decorated has been declared regardless of the order in which module.decorator is declared.


**Does this PR introduce a breaking change?**
Possibly.  If the same provider is decorated multiple times via a combination of module.decorator and $provide.decorator (via module.config), the decoration order may change now depending on declaration order of the module methods.



**Please check if the PR fulfills these requirements**
- [x] The commit message follows our guidelines: https://github.com/angular/angular.js/blob/master/CONTRIBUTING.md#commit-message-format
- [x] Tests for the changes have been added (for bug fixes / features)

**Other information**:

I didn't ngdoc the added queue param of invokeLaterAndSetModuleName because this fn isn't publically exposed and queue wasn't doc'd for invokeLater.

module.decorator() is now processed via the configBlocks order of operations and:
- no longer throws if declared before the provider being decorated
- guarantees the correct provider will be decorated when multiple,
  same-name providers are defined

Closes: #12382

=============

https://github.com/angular/angular.js/pull/14348

=================================================================
=================================================================

Friday, April 29, 2016 6:45 PM

I've made the following changes:
- relocated the `Closes` tag to come before `BREAKING CHANGE:` in the commit message
- renamed fn name examples in the commit message
- created an additional unit test


Regarding the additional unit test...

I included the additional unit test in `loaderSpec` (as opposed to `injectorSpec`) because the failure described via #12382 is relevant to `module`.

However, I'm not entirely convinced this test is necessary because this PR is meant to move the processing of `module.decorator` declarations to the `configBlocks` queue. The originally modified unit test in `loaderSpec` proves that change works.


Regarding the `Closes` tag... 

Neither the [Contributing to AngularJS](https://github.com/angular/angular.js/blob/master/CONTRIBUTING.md#footer) nor the [AngularJS Git Commit Message Conventions](https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#heading=h.uh9jqqu4fjy3) documents seem to specify that the `Closes #<issue number>` tag **needs** to come before `BREAKING CHANGE:`.  In fact, the outline section displayed at the top of [AngularJS Git Commit Message Conventions](https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#) seems to indicate _Referencing issues_ comes last in the _Message footer_.

Many BC commits seem to follow this pattern: [d06431e](https://github.com/angular/angular.js/commit/d06431e5309bb0125588877451dc79b935808134), [98c2db7](https://github.com/angular/angular.js/commit/98c2db7f9c2d078a408576e722407d518c7ee10a), [98528be](https://github.com/angular/angular.js/commit/98528be311b48269ba0e15ba4e3e2ad9b89693a9), [983b059](https://github.com/angular/angular.js/commit/983b0598121a8c5a3a51a30120e114d7e3085d4d), etc...

Maybe the docs can be updated if format is critical and the above is no longer acceptable?

Thanks!

---

fix(loader): module.decorator order of operations is now irrelevant

`module.decorator` is now processed via the configBlocks order of operations and:
  1. no longer throws if declared before the provider being decorated.
  2. guarantees the correct provider will be decorated when multiple, same-name 
  providers are defined.

(1) Prior to this fix, declaring `module.decorator` before the provider that it 
decorates results in throwing an error:

```js
angular
  .module('theApp', [])
  .decorator('theFactory', moduleDecoratorFn)
  .factory('theFactory', theFactoryFn);

// Error: [$injector:modulerr] Failed to instantiate module theApp due to:
// Error: [$injector:unpr] Unknown provider: theFactoryProvider  
```

The result of this fix now allows for the declaration order above.

(2) Prior to this fix, declaring `module.decorator` before the final, same-named 
provider results in that provider **not** being decorated as expected:

**NOTE:** Angular does not use provider name spacing, so the final declared 
provider is selected if multiple, same-named providers are declared.

```js
angular
  .module('theApp', [])
  .factory('theFactory', theFactoryFn)
  .decorator('theFactory', moduleDecoratorFn)
  .factory('theFactory', theOtherFactoryFn);

// `theOtherFactoryFn` is selected as 'theFactory' provider but it is **not** 
// decorated via `moduleDecoratorFn` as expected
```

The result of this fix ensures that `theOtherFactoryFn` will be decorated as 
expected when using the declaration order above.

Closes #12382

BREAKING CHANGE:

`module.decorator` declarations are now processed as part of the `module.config` 
queue and may result in providers being decorated in a different order if 
`module.config` blocks are also used to decorate providers via 
`$provide.decorator`.

For example, consider the following declaration order in which 'theFactory' is 
decorated by both a `module.decorator` and a `$provide.decorator`:

```js
angular
  .module('theApp', [])
  .factory('theFactory', theFactoryFn)
  .config(function($provide) {
    $provide.decorator('theFactory', provideDecoratorFn);
  })
  .decorator('theFactory', moduleDecoratorFn);
```

Prior to this fix, 'theFactory' provider would be decorated in the following 
order:
  1. moduleDecoratorFn
  2. provideDecoratorFn

The result of this fix changes the order in which 'theFactory' is decorated 
because now `module.decorator` declarations are processed in the same order as 
`module.config` declarations:
  1. provideDecoratorFn
  2. moduleDecoratorFn

=================================================================
=================================================================